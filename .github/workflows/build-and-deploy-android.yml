name: Build APK on push to master

on:
  push:
    branches:
      - master

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      # 1) Clona el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Setup de Node.js (usa una LTS que Expo/EAS soporte, p.ej. 18 o 20)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 3) Instala dependencias (incluye expo, react-native, supabase, etc.)
      - name: Install dependencies
        run: npm ci

      # 4) Instala EAS CLI (la nueva forma recomendada de build)
      - name: Install EAS CLI
        run: npm install --global eas-cli

      # 5) Login a Expo/EAS usando el token en Secrets
      - name: Login to Expo/EAS
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          npx eas login --token "$EXPO_TOKEN"

      # 6) Lanza EAS Build para Android (produce un APK según eas.json)
      - name: Build Android APK with EAS
        run: |
          npx eas build --platform android --profile production --non-interactive

      # 7) Descarga el artefacto de EAS (APK) y lo sube como asset en GitHub Actions  
      #    Nota: EAS Build imprime un URL al finalizar; podemos usar eas-cli para "download"
      - name: Download the Android APK artifact
        run: |
          # extrae el ID del build recién lanzado
          BUILD_ID=$(npx eas build:list --status finished --platform android --limit 1 --json | jq -r '.[0].id')
          echo "Último build ID: $BUILD_ID"
          # descarga el APK a la carpeta de trabajo
          npx eas build:download --platform android --id "$BUILD_ID" --output ./app.apk

      # 8) Sube el APK descargado como artefacto en GitHub
      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: cazaFotos-android-apk
          path: app.apk
